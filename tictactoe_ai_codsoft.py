# -*- coding: utf-8 -*-
"""TicTacToe_AI_CodSoft

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UDWkMcMPCi0yEklnuJPc7MPO66iao4XW

# 🎮 Task 2: Tic-Tac-Toe AI  
👩‍💻 Name: Priyanka Sinha  
📅 CodSoft AI Internship – June Batch

---

## 📝 Project Description (No Voice Demo)

👉 This is a Python program to play Tic-Tac-Toe against a computer AI.  
👉 The AI uses the **Minimax Algorithm**, which makes it unbeatable.  
👉 You are “X”, and the computer is “O”.  
👉 The game runs in the Colab terminal (text-based).  

Below is the full code and gameplay output.
"""

import math

# Display the board
def print_board(board):
    for row in board:
        print("|".join(row))
        print("-" * 5)

# Check for winner
def check_winner(board):
    # Rows, columns and diagonals
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] != " ":
            return board[i][0]
        if board[0][i] == board[1][i] == board[2][i] != " ":
            return board[0][i]
    if board[0][0] == board[1][1] == board[2][2] != " ":
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] != " ":
        return board[0][2]
    return None

# Check if board is full
def is_full(board):
    for row in board:
        if " " in row:
            return False
    return True

# Minimax algorithm
def minimax(board, depth, is_maximizing):
    winner = check_winner(board)
    if winner == "O":
        return 1
    elif winner == "X":
        return -1
    elif is_full(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "O"
                    score = minimax(board, depth + 1, False)
                    board[i][j] = " "
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "X"
                    score = minimax(board, depth + 1, True)
                    board[i][j] = " "
                    best_score = min(score, best_score)
        return best_score

# AI move
def best_move(board):
    best_score = -math.inf
    move = (0, 0)
    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                board[i][j] = "O"
                score = minimax(board, 0, False)
                board[i][j] = " "
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

# Main game
def play_game():
    board = [[" " for _ in range(3)] for _ in range(3)]
    print("You are X. Computer is O.")
    print_board(board)

    while True:
        # Player move
        row = int(input("Enter row (0-2): "))
        col = int(input("Enter col (0-2): "))
        if board[row][col] != " ":
            print("Invalid move. Try again.")
            continue
        board[row][col] = "X"

        if check_winner(board) == "X":
            print_board(board)
            print("You win!")
            break
        elif is_full(board):
            print_board(board)
            print("It's a draw!")
            break

        # Computer move
        comp_row, comp_col = best_move(board)
        board[comp_row][comp_col] = "O"

        print_board(board)

        if check_winner(board) == "O":
            print("Computer wins!")
            break
        elif is_full(board):
            print("It's a draw!")
            break

# Run the game
play_game()